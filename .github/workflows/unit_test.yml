#check later if you need 'GitHub Actions' Extension

# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python



#WHAT IS THIS FILE AND WHY IS IT IMPORTANT :------------

# This YAML File  : Is called a workflow is the entire automation process defined in a YAML file.
# It defines:
# When to run → triggers under on:
# What to run → jobs and their steps




name: Python CI First Project


#Under 'on' we have all the triggers to start the workflow
on:
  # When a 'push' is made to then main branch then run the workflow
  push:
    branches: [ "main" ]
  # When a 'pull request' is made to then main branch then run the workflow
  pull_request:
    branches: [ "main" ]

#controls what the GitHub Actions workflow is allowed to do with the repository.
permissions:
  contents: read


#A job is a section inside a workflow.
# It is a collection of steps that run in a single virtual machine (VM).
jobs:
  unit_testing:

    #what virtual machine (OS environment) to use when running the job.
    runs-on: ubuntu-latest

    # Each step is an individual task that the workflow runs
    steps:

    # Step 1: Check out the code from the repository
    - name : Check out code
    #Here we  copy (clones) your GitHub repository (the same code you see in your repo on GitHub)
    #into the job’s virtual machine (like the ubuntu-latest runner).
      uses: actions/checkout@v4


    # Step 2: Setup Python
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"


    #Step 3 : Install Dependencies
    - name: Install dependencies
      #tells GitHub Actions to execute shell commands (like running them in a terminal).
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    ## Step 4: Lint code (check Python syntax, undefined names, code style, and complexity)
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        

    - name: Test with pytest
      run: |
        pytest
